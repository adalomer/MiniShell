Minishell
42 Projesi | Minimal bir Bash benzeri shell implementasyonu
Komut yorumlayƒ±cƒ±sƒ±, process y√∂netimi, piping, redirection, sinyaller ve ortam deƒüi≈ükenleri gibi temel UNIX kavramlarƒ±nƒ± √∂ƒürenmek i√ßin geli≈ütirilmi≈ütir.

üß† Projenin Amacƒ±
Minishell, bash veya zsh gibi temel bir kabuƒüun en temel fonksiyonlarƒ±nƒ± kendi ellerinle yeniden in≈üa etmeyi hedefler. Bu projeyle birlikte:

Shell ortamƒ± tasarƒ±mƒ±

Komut ayrƒ±≈ütƒ±rma (lexing/parsing)

Process olu≈üturma ve y√∂netme (fork / execve)

Pipe (|), y√∂nlendirme (>, <, >>, <<)

Environment deƒüi≈üken y√∂netimi

Built-in komutlar

Sinyal yakalama ve y√∂netimi

Bellek y√∂netimi

gibi sistem programlamanƒ±n yapƒ± ta≈ülarƒ±nƒ± √∂ƒürenmi≈ü olacaksƒ±n.

üß© Proje Mimarisi
php
Kopyala
D√ºzenle
minishell/
‚îú‚îÄ‚îÄ main.c                   # Shell loop & readline
‚îú‚îÄ‚îÄ minishell.h              # Global yapƒ±lar & tanƒ±mlar
‚îú‚îÄ‚îÄ parser/                  # Tokenizer & command parser
‚îÇ   ‚îú‚îÄ‚îÄ lexer.c
‚îÇ   ‚îú‚îÄ‚îÄ parser.c
‚îÇ   ‚îî‚îÄ‚îÄ quotes.c
‚îú‚îÄ‚îÄ executor/                # Komut √ßalƒ±≈ütƒ±rma, fork, redir
‚îÇ   ‚îú‚îÄ‚îÄ executor.c
‚îÇ   ‚îú‚îÄ‚îÄ pipe.c
‚îÇ   ‚îú‚îÄ‚îÄ redirection.c
‚îú‚îÄ‚îÄ builtins/                # Built-in komutlar
‚îÇ   ‚îú‚îÄ‚îÄ cd.c, echo.c, exit.c, ...
‚îú‚îÄ‚îÄ env/                     # Env deƒüi≈üken y√∂netimi
‚îÇ   ‚îî‚îÄ‚îÄ env_utils.c
‚îú‚îÄ‚îÄ signals/                 # SIGINT, SIGQUIT handler
‚îÇ   ‚îî‚îÄ‚îÄ signals.c
‚îú‚îÄ‚îÄ utils/                   # Yardƒ±mcƒ± fonksiyonlar
‚îÇ   ‚îú‚îÄ‚îÄ ft_split.c, free_utils.c, ...
‚îî‚îÄ‚îÄ Makefile
‚öôÔ∏è √áalƒ±≈üma A≈üamalarƒ±
1. Readline & Input ƒ∞≈üleme
readline() ile komut al

add_history() ile ge√ßmi≈üe ekle

Quotes (", '), pipe (|), redirection (<, >, <<, >>) ayrƒ±≈ütƒ±r

2. Parser
Tokenlarƒ± command yapƒ±sƒ±na d√∂n√º≈üt√ºr

Arg√ºmanlarƒ± ayƒ±r, heredoc varsa ge√ßici dosyaya yaz

3. Executor
Komutu fork edip √ßalƒ±≈ütƒ±r

Gerekirse execve ile PATH i√ßinde ara

Built-in ise doƒürudan √ßalƒ±≈ütƒ±r (√∂rn. cd, export, exit)

4. Redirection
dup2, open, close ile y√∂nlendirme ayarlarƒ±

> >>: stdout y√∂nlendirme

<: input okuma

<<: heredoc, sƒ±nƒ±rlayƒ±cƒ±ya kadar okuma

5. Pipes
pipe(), dup2() ve fork() ile √ßoklu komut zinciri

√ñrnek: ls | grep foo | wc -l

6. Environment Deƒüi≈ükenleri
export VAR=value, unset VAR, echo $VAR

$?, $PATH gibi deƒüi≈ükenlerin √ß√∂z√ºlmesi

Kendi ortam deƒüi≈ükeni linked list yapƒ±sƒ± olu≈ütur

7. Signals
SIGINT (Ctrl+C) ‚Üí readline temizle, shell kapanmaz

SIGQUIT (Ctrl+\) ‚Üí child‚Äôda √ßalƒ±≈ümalƒ±

heredoc sƒ±rasƒ±nda √∂zel signal handler gerekebilir

8. Exit Status
Komut ba≈üarƒ± durumuna g√∂re $? g√ºncellenir

command not found ‚Üí 127, permission denied ‚Üí 126

üõ†Ô∏è Kullanƒ±lan Fonksiyonlar
Kategori	Fonksiyonlar
I/O & Exec	readline, write, open, close, dup2, execve, access, fork, pipe, waitpid
Signal	signal, sigaction, kill
Env	getenv, setenv (manuel), unsetenv
Parsing	strtok, strjoin, strdup, strchr, ft_split, malloc/free

üîß Built-in Komutlar
Komut	A√ßƒ±klama
cd	Dizini deƒüi≈ütir
echo	Arg√ºmanlarƒ± yazdƒ±r
pwd	Ge√ßerli dizini yazdƒ±r
exit	Shell‚Äôden √ßƒ±k
export	Env deƒüi≈ükeni ekle
unset	Env deƒüi≈ükenini sil
env	T√ºm env deƒüi≈ükenlerini g√∂ster

‚úÖ Test Edilmesi Gereken √ñrnekler
bash
Kopyala
D√ºzenle
ls -la | grep minishell
cat < infile | grep test > outfile
echo hello > file && cat file
export NAME=test && echo $NAME
cd ~/Desktop && pwd
echo $?
cat << EOF
heredoc test
EOF
üî• Bonus (ƒ∞steƒüe Baƒülƒ±)
&&, || gibi mantƒ±ksal zincirler

(*.c) gibi wildcard desteƒüi

(ls && echo ok) gibi komut gruplarƒ±

Shell ge√ßmi≈üinin .history dosyasƒ±na yazƒ±lmasƒ±

üîí Kurallar
‚úÖ Norminette uyumlu
‚úÖ Bellek sƒ±zƒ±ntƒ±sƒ± yok (Valgrind √∂nerilir)
‚úÖ Global deƒüi≈üken kullanƒ±mƒ± yasak
‚úÖ readline ve heredoc d√ºzg√ºn sinyal davranƒ±≈üƒ±

üèÅ Ba≈ülatmak ƒ∞√ßin
bash
Kopyala
D√ºzenle
make
./minishell
üìö √ñƒürenilen Konular
Unix sistem √ßaƒürƒ±larƒ±

Process y√∂netimi

File descriptor kavramƒ±

Tokenizasyon & parser yazƒ±mƒ±

Sinyal ve handler y√∂netimi

Memory leak avcƒ±lƒ±ƒüƒ± üïµÔ∏è

